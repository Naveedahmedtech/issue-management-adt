import { useEffect, useState } from "react";
import { HotTable } from "@handsontable/react";
import Table from "../Table";
import { BASE_URL } from "../../constant/BASE_URL";
import * as XLSX from "xlsx"; // Importing SheetJS to parse Excel files
import 'handsontable/styles/handsontable.min.css';
import 'handsontable/styles/ht-theme-main.min.css';

const Documents = ({
  columns,
  data,
  isLoading,
}: {
  columns: any;
  data: any;
  setIsUploadModalOpen: any;
  isLoading: boolean;
}) => {
  const [excelData, setExcelData] = useState<any[]>([]);
  const [selectedFile, setSelectedFile] = useState<string | null>(null);

  useEffect(() => {
    if (selectedFile) {
      fetchExcelFile(selectedFile);
    }
  }, [selectedFile]);

  // Function to load and parse the Excel file using XLSX
  const fetchExcelFile = async (filePath: string) => {
    try {
      const response = await fetch(`${BASE_URL}/${filePath}`);
      const blob = await response.blob();
      const reader = new FileReader();

      reader.onload = (e) => {
        const data = new Uint8Array(e.target?.result as ArrayBuffer);
        const workbook = XLSX.read(data, { type: "array" });
        const sheetName = workbook.SheetNames[0];
        const sheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 }); // Convert to 2D array
        setExcelData(jsonData);
      };

      reader.readAsArrayBuffer(blob);
    } catch (error) {
      console.error("Error fetching the Excel file:", error);
    }
  };

  // Function to handle view button click
  const handleViewExcel = (filePath: string) => {
    setSelectedFile(filePath);
  };

  // Function to handle edit button click (you can extend this as needed)
  const handleEditExcel = (filePath: string) => {
    alert(`Edit functionality is not implemented yet for: ${filePath}`);
  };

  return (
    <div className="bg-background min-h-screen">
      {isLoading ? (
        <div className="flex justify-center items-center min-h-[200px]">
          <div className="text-primary text-lg font-semibold">Loading documents...</div>
        </div>
      ) : (
        <>
          <div className="flex justify-center items-center min-h-[200px]">
            {data && data.length > 0 ? (
              <Table
                columns={columns.map((col: any) => {
                  if (col.key === "filePath") {
                    return {
                      ...col,
                      render: (filePath: string) => (
                        <div className="flex gap-2">
                          <button
                            className="bg-blue-500 text-white px-2 py-1 rounded-md"
                            onClick={() => handleViewExcel(filePath)}
                          >
                            View Excel
                          </button>
                          <button
                            className="bg-green-500 text-white px-2 py-1 rounded-md"
                            onClick={() => handleEditExcel(filePath)}
                          >
                            Edit Excel
                          </button>
                        </div>
                      ),
                    };
                  }
                  return col;
                })}
                data={data}
              />
            ) : (
              <div className="text-textLight text-lg font-medium">No documents available.</div>
            )}
          </div>

          {/* Excel Viewer */}
          {excelData.length > 0 && (
            <div className="my-4 p-4 bg-white shadow-md">
              <HotTable
                data={excelData}
                colHeaders={true}
                rowHeaders={true}
                stretchH="all"
                width="100%"
                height="400px"
                licenseKey="non-commercial-and-evaluation"
              />
            </div>
          )}

          {/* File selection (for demo purposes, can be removed) */}
          <div className="mt-4 flex justify-center">
            <select
              onChange={(e) => setSelectedFile(e.target.value)}
              className="border border-gray-300 rounded-md p-2"
              defaultValue=""
            >
              <option value="" disabled>
                Select an Excel file to view
              </option>
              {data
                .filter((file: any) => file.filePath.endsWith(".xlsx"))
                .map((file: any) => (
                  <option key={file.id} value={file.filePath}>
                    {file.filePath.split("/").pop()}
                  </option>
                ))}
            </select>
          </div>
        </>
      )}
    </div>
  );
};

export default Documents;
