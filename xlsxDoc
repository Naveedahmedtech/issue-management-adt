import Table from "../Table";
import * as XLSX from "xlsx";
import { useState } from "react";
import { BASE_URL } from "../../constant/BASE_URL";

const Documents = ({
  columns,
  data,
  isLoading,
}: {
  columns: any;
  data: any;
  setIsUploadModalOpen: any;
  isLoading: boolean;
}) => {
  const [excelData, setExcelData] = useState<any[]>([]);
  const [isExcelViewOpen, setIsExcelViewOpen] = useState(false);

  // Function to fetch and parse Excel file
  const handleViewExcelFile = async (filePath: string) => {
    try {
      const response = await fetch(`${BASE_URL}/${filePath}`);
      const blob = await response.blob();

      const reader = new FileReader();
      reader.onload = (e: any) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: "array" });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(worksheet);
        setExcelData(jsonData);
        setIsExcelViewOpen(true);
      };
      reader.readAsArrayBuffer(blob);
    } catch (error) {
      console.error("Error loading Excel file:", error);
    }
  };

  // Function to handle cell edits
  const handleCellChange = (rowIndex: number, columnKey: string, value: string) => {
    const updatedData = [...excelData];
    updatedData[rowIndex][columnKey] = value;
    setExcelData(updatedData);
  };

  // âœ… Function to save and download updated Excel file
  const handleSaveExcelFile = () => {
    try {
      const worksheet = XLSX.utils.json_to_sheet(excelData);
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

      // Download the Excel file
      XLSX.writeFile(workbook, "UpdatedExcelFile.xlsx");
    } catch (error) {
      console.error("Error saving Excel file:", error);
    }
  };

  // Create columns in the expected format
  const excelColumns = excelData.length > 0
    ? Object.keys(excelData[0]).map((key) => ({
        id: key,
        label: key,
        render: (row: any) => (
          <input
            type="text"
            value={row[key] || ""}
            onChange={(e) => {
              const rowIndex = excelData.indexOf(row);
              handleCellChange(rowIndex, key, e.target.value);
            }}
            className="border rounded px-2 py-1"
          />
        ),
      }))
    : [];

  return (
    <div className="bg-background min-h-screen">
      {isLoading ? (
        <div className="flex justify-center items-center min-h-[200px]">
          <div className="text-primary text-lg font-semibold">Loading documents...</div>
        </div>
      ) : data && data.length > 0 ? (
        <div>
          <Table columns={columns} data={data} />
          {data.map((file: any) =>
            file.filePath.endsWith(".xlsx") ? (
              <div key={file.id} className="my-4">
                <button
                  onClick={() => handleViewExcelFile(file.filePath)}
                  className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  View Excel: {file.filePath.split("/").pop()}
                </button>
              </div>
            ) : null
          )}

          {isExcelViewOpen && (
            <div className="mt-4 bg-white p-4 rounded shadow">
              <h2 className="text-lg font-semibold mb-2">Editable Excel Data</h2>
              <Table columns={excelColumns} data={excelData} />
              <button
                onClick={handleSaveExcelFile}
                className="mt-4 px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
              >
                Save and Download Excel
              </button>
            </div>
          )}
        </div>
      ) : (
        <div className="flex justify-center items-center min-h-[200px]">
          <div className="text-textLight text-lg font-medium">No documents available.</div>
        </div>
      )}
    </div>
  );
};

export default Documents;
